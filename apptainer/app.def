{#- Required jinja arguments                                                                  -#}
{#- APPTAINER_BOOTSTRAP: The BootStrap to use (typically localimage or oras)                  -#}
{#- APPTAINER_FROM: The From to use (path to an image or an oras URI)                         -#}
{#- APPLICATION_DIR: Path on the host to the application repository                           -#}
{#- MOOSE_DIR: Path on the host to the MOOSE repository                                       -#}
{#- BINARY_NAME: Name of the application binary                                               -#}

{#- Optional jinja arguments                                                                  -#}
{#- MOOSE_JOBS: Number of jobs to pass to the build                                           -#}
{#- MOOSE_OPTIONS: Options to pass to the MOOSE configure                                     -#}
{#- MOOSE_SKIP_DOCS: Set to anything to skip the docs build                                   -#}
{#- MOOSE_DOCS_FLAGS: Doc options to pass during the make install                             -#}
{#- METHOD: The method to build; defaults to "opt"                                            -#}
{#- TEST_DIRS: Directories to test in the %test section; defaults to just "tests"             -#}

{#- Civet Specific jinja arguments                                                            -#}
{#- allowed_to_fail: BOOL, specific to Civet. Only available in %post, %test section          -#}

{#- Optional Application specific jinja arguments                                             -#}
{#- SECTION_ENVIRONMENT: Adds additional environment variables set upon entering container    -#}
{#- SECTION_POST: Partially replaces %post (make, make install, section)                      -#}
{#- SECTION_TEST: Partially replaces %test (for loop section)                                 -#}

{#- The within-container build directory to use                                               -#}
{%- set ROOT_BUILD_DIR = '/root/build' -%}

BootStrap: {{ APPTAINER_BOOTSTRAP }}
From: {{ APPTAINER_FROM }}

%setup
    # Load jinja vars
    ROOT_BUILD_DIR={{ ROOT_BUILD_DIR }}
    APPLICATION_DIR={{ APPLICATION_DIR }}
    MOOSE_DIR={{ MOOSE_DIR }}
    TEST_DIRS={{ TEST_DIRS }}

    # Build directory in the container
    BUILD_DIR=${APPTAINER_ROOTFS}${ROOT_BUILD_DIR}
    mkdir ${BUILD_DIR}

    # Copy application into the container
    cp -r ${APPLICATION_DIR} ${BUILD_DIR}

    # Where the application ends up; needed for MOOSE logic below
    APPLICATION_NAME=$(basename ${APPLICATION_DIR})
    APPLICATION_BUILD_DIR=${BUILD_DIR}/${APPLICATION_NAME}

    # Figure out where moose is; regardless %post will expect
    # it to be in {{ ROOT_BUILD_DIR }}/moose
    MOOSE_BUILD_DIR=${BUILD_DIR}/moose
    MOOSE_RELATIVE_PATH=$(realpath --relative-to ${APPLICATION_DIR} ${MOOSE_DIR})
    # MOOSE_DIR is not in the application; we need to copy it
    if [[ $MOOSE_RELATIVE_PATH = ..* ]]; then
        mkdir ${MOOSE_BUILD_DIR}
        cp -r ${MOOSE_DIR}/. ${MOOSE_BUILD_DIR}
    # MOOSE_DIR is the application (combined-opt)
    elif [[ '{{ BINARY_NAME }}' == 'moose-combined' ]]; then
        # do nothing
        :
    # MOOSE_DIR is in the application, setup a symlink
    else
        ln -s ./${APPLICATION_NAME}/${MOOSE_RELATIVE_PATH} ${MOOSE_BUILD_DIR}
    fi

{%- if MOOSE_SKIP_DOCS is not defined %}
    # Need large_media for documentation
    cd ${MOOSE_BUILD_DIR}
    git submodule update --init large_media
{%- endif %}

%environment
    export MOOSE_APPLICATION_NAME={{ BINARY_NAME }}
{%- if BINARY_NAME == 'moose-combined' %}
    export PATH=/opt/moose/bin:$PATH
{%- else %}
    export PATH=/opt/{{ BINARY_NAME }}/bin:$PATH
{%- endif %}
{%- if SECTION_ENVIRONMENT is defined %}
    {{ SECTION_ENVIRONMENT }}
{%- endif %}

%post
    # Load jinja vars
{%- if SECTION_POST_PRE is defined %}
    {{ SECTION_POST_PRE }}
{%- endif %}
    APPLICATION_NAME=$(basename {{ APPLICATION_DIR }})
    BINARY_NAME={{ BINARY_NAME }}
    METHOD={{ METHOD or "opt" }}
    MOOSE_DOCS_FLAGS="{{ MOOSE_DOCS_FLAGS }}"
    export MOOSE_JOBS={{ MOOSE_JOBS or "1" }}
    MOOSE_OPTIONS="{{ MOOSE_OPTIONS }}"
    export MOOSE_SKIP_DOCS={{ MOOSE_SKIP_DOCS }}
    TEMP_LOC={{ ROOT_BUILD_DIR }}
    APPLICATION_DIR=${TEMP_LOC}/${APPLICATION_NAME}
    export MOOSE_DIR=${TEMP_LOC}/moose

    # If MOOSE_DIR is a symlink, we're using MOOSE within
    # the app, so use that instead
    if test -h $MOOSE_DIR; then
        MOOSE_DIR_REAL=$(realpath $MOOSE_DIR)
        rm ${MOOSE_DIR}
        export MOOSE_DIR=${MOOSE_DIR_REAL}
    fi

{%- if MOOSE_SKIP_DOCS is not defined %}
    # These are needed for documentation and will be removed later
    EXTRA_DOC_PACKAGES="livereload pybtex beautifulsoup4"
    mamba install -yq $EXTRA_DOC_PACKAGES
{%- endif %}

    # Setup install
{%- if BINARY_NAME == 'moose-combined' %}
    MOOSE_PREFIX=/opt/moose
{%- else %}
    MOOSE_PREFIX=/opt/${BINARY_NAME}
{%- endif %}
    cd ${MOOSE_DIR}
{%- if allowed_to_fail is defined %}
    # CIVET allowed_to_fail is True
    set +e
{%- endif %}
{%- if SECTION_POST_PRE_CONFIGURE is defined %}
    {{ SECTION_POST_PRE_CONFIGURE }}
{%- endif %}
    ./configure --prefix=$MOOSE_PREFIX ${MOOSE_OPTIONS}
{%- if SECTION_POST_POST_CONFIGURE is defined %}
    {{ SECTION_POST_POST_CONFIGURE }}
{%- endif %}
    # Build and install
{%- if BINARY_NAME == 'moose-combined' %}
    cd ${APPLICATION_DIR}/modules
{%- else %}
    cd ${APPLICATION_DIR}
{%- endif %}
{%- if SECTION_POST_PRE_MAKE is defined %}
    {{ SECTION_POST_PRE_MAKE }}
{%- endif %}
    make -j ${MOOSE_JOBS} METHOD=${METHOD}
{%- if SECTION_POST_POST_MAKE is defined %}
    {{ SECTION_POST_POST_MAKE }}
{%- endif %}
{%- if SECTION_POST_PRE_MAKEINSTALL is defined %}
    {{ SECTION_POST_PRE_MAKEINSTALL }}
{%- endif %}
    make install -j ${MOOSE_JOBS} MOOSE_SKIP_DOCS=${MOOSE_SKIP_DOCS} MOOSE_DOCS_FLAGS="${MOOSE_DOCS_FLAGS}" METHOD=${METHOD}
{%- if SECTION_POST_POST_MAKEINSTALL is defined %}
    {{ SECTION_POST_POST_MAKEINSTALL }}
{%- endif %}
{%- if allowed_to_fail is defined %}
    # CIVET allowed_to_fail not allowed for remainder steps
{%- endif %}
    # force error shell behavior for remainder steps
    set -e
    # Fix permissions for installed application
    chmod -R o=u-w,g=u-w ${MOOSE_PREFIX}

{%- if MOOSE_SKIP_DOCS is not defined %}
    # Remove the packages that were for only documentation
    mamba uninstall -yq ${EXTRA_DOC_PACKAGES}
{%- endif %}

{%- if BINARY_NAME == 'moose-combined' %}
    # Create moose-opt symlink to combined-opt
    cd /opt/moose/bin
    ln -s combined-opt moose-opt
{%- endif %}

{%- if SECTION_POST_POST is defined %}
    {{ SECTION_POST_POST }}
{%- endif %}

    # Setup the apptainer directory for metadata/testing/etc
    APP_APPTAINER=${MOOSE_PREFIX}/moose-apptainer
    mkdir ${APP_APPTAINER}
    chmod 755 ${APP_APPTAINER}
    # Create the test script for this application
    TEST_SCRIPT=${APP_APPTAINER}/test.sh
    echo "#!/bin/bash" > ${TEST_SCRIPT}
    echo "set -e" >> ${TEST_SCRIPT}
    echo "/opt/moose-apptainer/test_binary.sh ${MOOSE_PREFIX}/bin/$(basename ${MOOSE_PREFIX})-${METHOD} \"${TEST_DIRS:-tests}\" \$*" >> ${TEST_SCRIPT}
    chmod 755 ${TEST_SCRIPT}
    # Create info file
    INFO_FILE=${APP_APPTAINER}/info.yaml
    echo "moose_apptainer_version: $(python ${MOOSE_DIR}/scripts/versioner.py moose)" > ${INFO_FILE}
    echo "moose_git_version: $(cd $MOOSE_DIR; git rev-parse HEAD)" >> ${INFO_FILE}
    chmod 644 ${INFO_FILE}
    # Copy in the def file
    DEF_FILE=${APP_APPTAINER}/def.def
    cp /.singularity.d/Singularity ${DEF_FILE}
    chmod 644 ${DEF_FILE}

    # Cleanup
    rm -rf $TEMP_LOC
    dnf clean all

%test
{%- if BINARY_NAME == 'moose-combined' %}
    MOOSE_PREFIX=/opt/moose
{%- else %}
    MOOSE_PREFIX=/opt/{{ BINARY_NAME }}
{%- endif %}
    ${MOOSE_PREFIX}/moose-apptainer/test.sh
