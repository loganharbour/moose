{#- Required jinja arguments                                                                  -#}
{#- APPTAINER_BOOTSTRAP: The BootStrap to use (typically localimage or oras)                  -#}
{#- APPTAINER_FROM: The From to use (path to an image or an oras URI)                         -#}

{#- Optional jinja arguments                                                                  -#}
{#- CONDA_ALT_CHANNEL: An alternate channel to add to conda                                   -#}
{#- MOOSE_TOOLS_VERSION: The version to pin moose-tools to (if any)                           -#}
{#- MOOSE_TEST_TOOLS_VERSION: The version to pin moose-test-tools to (if any)                 -#}
{#- DEV_CONTAINER: Set to anything to add development packages                                -#}

{#- Location to install mambaforge                                                            -#}
{%- set MOOSE_MAMBAFORGE = '/opt/mambaforge3' -%}

{#- Name of the environment to create in mamba                                                -#}
{%- set MOOSE_MAMBA_ENV = 'moose' -%}

BootStrap: {{ APPTAINER_BOOTSTRAP }}
From: {{ APPTAINER_FROM }}

%environment
    export PATH={{ MOOSE_MAMBAFORGE }}/bin:$PATH
    source activate {{ MOOSE_MAMBAFORGE }}/envs/{{ MOOSE_MAMBA_ENV }}

%post
    umask 022

    # Setup temp location
    TEMP_LOC=/root/build
    mkdir $TEMP_LOC

    # Load jinja vars
    MOOSE_MAMBAFORGE={{ MOOSE_MAMBAFORGE }}
    MOOSE_MAMBA_ENV={{ MOOSE_MAMBA_ENV }}
    MOOSE_TOOLS_VERSION={{ MOOSE_TOOLS_VERSION }}
    MOOSE_TEST_TOOLS_VERSION={{ MOOSE_TEST_TOOLS_VERSION }}
    CONDA_ALT_CHANNEL={{ CONDA_ALT_CHANNEL }}

    # Pinned versions
    MAMBAFORGE_VERSION=23.1.0-0
    PYTHON_VERSION=3.10

    # Need squashfs for pulling out the /opt dir for applications
    dnf install -y squashfs-tools

    # Install mamba in MOOSE_MAMBAFORGE
    curl -L https://github.com/conda-forge/miniforge/releases/download/${MAMBAFORGE_VERSION}/Mambaforge-${MAMBAFORGE_VERSION}-Linux-x86_64.sh -o ${TEMP_LOC}/mambaforge.sh
    bash ${TEMP_LOC}/mambaforge.sh -b -p ${MOOSE_MAMBAFORGE}
    rm ${TEMP_LOC}/mambaforge.sh
    PATH=${MOOSE_MAMBAFORGE}/bin:$PATH

    # Add moose channels
    conda config --env --add channels https://conda.software.inl.gov/public
    # Add an alt channel if given
    if [ -n "$CONDA_ALT_CHANNEL" ]; then
        conda config --env --add channels ${CONDA_ALT_CHANNEL}
    fi
    {% if DEV_CONTAINER is defined %}
    # DEV_CONTAINER is set, installing moose-tools
    MAMBA_PACKAGES="moose-tools=${MOOSE_TOOLS_VERSION}"
    {% else %}
    # DEV_CONTAINER is not set, installing moose-test-tools
    MAMBA_PACKAGES="moose-test-tools=${MOOSE_TEST_TOOLS_VERSION}"
    {% endif -%}
    # Install packages
    mamba create -yq -n ${MOOSE_MAMBA_ENV} python=${PYTHON_VERSION} ${MAMBA_PACKAGES}

    # Activate the new environment
    source activate ${MOOSE_MAMBAFORGE}/envs/${MOOSE_MAMBA_ENV}

{% if DEV_CONTAINER is defined -%}
    # Other Development container installs
    dnf --enablerepo=powertools install -y lcov
    pip3 --no-cache install lcov-cobertura
{%- endif %}

    # Setup the apptainer directory for metadata/testing/etc
    MOOSE_APPTAINER=/opt/moose-apptainer
    mkdir ${MOOSE_APPTAINER}
    chmod 755 ${MOOSE_APPTAINER}

    # Create the test script for a single application
    TEST_BINARY_SCRIPT=${MOOSE_APPTAINER}/test_binary.sh
    cat << 'EOF' > ${TEST_BINARY_SCRIPT}
#!/bin/bash
set -e
BINARY=${1}
if [ -z "${BINARY}" ]; then
  echo "Binary path (first argument) not set"; exit 1
fi
BINARY_NAME=$(basename ${BINARY%-*})
TEST_DIRS=${2}
if [ -z "${TEST_DIRS}" ]; then
  echo "Test directories (second argument) not set"; exit 1
fi
EXTRA_ARGS="${@:3}"
echo "Running ${BINARY} tests for directories ${TEST_DIRS}"
TEMP_LOC=$(mktemp -u -d /tmp/$(basename $BINARY_NAME)-test.XXXXXX)
for TEST_DIR in ${TEST_DIRS}; do
    mkdir -p $TEMP_LOC
    cd $TEMP_LOC
    ${BINARY} --copy-inputs $TEST_DIR
    cd ${BINARY_NAME}/${TEST_DIR}
    ${BINARY} --run -j ${MOOSE_JOBS:-1} -t ${EXTRA_ARGS}
    rm -rf $TEMP_LOC
done
EOF
    chmod 755 ${TEST_BINARY_SCRIPT}

    # Create general test script for all applications
    TEST_SCRIPT=${MOOSE_APPTAINER}/test.sh
    cat << 'EOF' > ${TEST_SCRIPT}
#!/bin/bash
set -e
if ! ls /opt/*/moose-apptainer/test.sh &> /dev/null; then
    echo "No test scripts found to run"
    exit 0
fi
for test_file in /opt/*/moose-apptainer/test.sh; do
    echo "Running tests in ${test_file}"
    ${test_file} $*
done
EOF
    chmod 755 ${TEST_SCRIPT}

    # Create squash helper
    SQUASH_SCRIPT=${MOOSE_APPTAINER}/squash.sh
    cat << 'EOF' > ${SQUASH_SCRIPT}
#!/bin/bash
set -e
if [ -z "${MOOSE_APPLICATION_NAME}" ]; then
  echo "Cannot run when not in an application container (MOOSE_APPLICATION_NAME unset)"; exit 1
fi
TO_FILE=$1
if [ -z "${TO_FILE}" ]; then
  echo "Positional argument is unset (where to squash to)"; exit 1
fi
mksquashfs /opt/${MOOSE_APPLICATION_NAME} ${TO_FILE} -root-owned -keep-as-directory
EOF
    chmod 755 ${SQUASH_SCRIPT}

    # Clean up
    conda clean -ya
    rm -rf ${TEMP_LOC}

%test
    /opt/moose-apptainer/test.sh
